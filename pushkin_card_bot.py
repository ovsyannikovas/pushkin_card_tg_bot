from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hbold, hlink
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from main import DataGetter
from cities import cities_dict
from asyncio import sleep
import json
import os

bot = Bot(token=os.getenv("TOKEN"), parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())


class UserInfoStatesGroup(StatesGroup):
    city = State()
    event_type = State()
    # filter_events = State()


@dp.message_handler(commands="start", state="*")
async def start(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –í–∞—à –≥–æ—Ä–æ–¥.", reply_markup=types.ReplyKeyboardRemove())
    await UserInfoStatesGroup.city.set()


@dp.message_handler(lambda x: x.text.lower().replace(" ", "") == "–ø–æ–º–µ–Ω—è—Ç—å–≥–æ—Ä–æ–¥", state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.finish()
    await start(message)


def get_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ö–∏–Ω–æ", "–°–ø–µ–∫—Ç–∞–∫–ª–∏").add("–ü–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥")
    return keyboard


@dp.message_handler(lambda x: x.text.lower().replace(' ', '') in cities_dict, state=UserInfoStatesGroup.city)
async def choose_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text

    await UserInfoStatesGroup.next()

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_keyboard())


@dp.message_handler(state=UserInfoStatesGroup.city)
async def choose_city_fail(message: types.Message):
    await message.answer("–¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –Ø–Ω–¥–µ–∫—Å –ê—Ñ–∏—à–∏. üòï –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑.",
                         reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(state=UserInfoStatesGroup.event_type)
async def choose_event_type(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        city = data['city']
    event_type = message.text

    if not validate_message(message):
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è:", reply_markup=get_keyboard())
    else:
        await receive_info(message, city, event_type)


# async def choose_filters():
#     ...


async def receive_info(message: types.Message, city, event_type):
    await message.answer("–°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏...", reply_markup=types.ReplyKeyboardRemove())
    data_getter = DataGetter(city, event_type)
    await data_getter.get_yandex_afisha_info()

    with open(data_getter.JSON_FILE_PATH, encoding='utf-8-sig') as file:
        data = json.load(file)

    data.sort(key=lambda movie: movie["rating"], reverse=True)
    rating_border = 7

    if len(data) == 0:
        await message.answer(
            f"–í –≥–æ—Ä–æ–¥–µ {hbold(city.capitalize())} –Ω–µ—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–∞ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. üòï",
            reply_markup=None)
        return

    for index, item in enumerate(data):
        if rating_border and item.get('rating') < rating_border:
            break

        arg_dict = {
            '–¶–µ–Ω–∞:': item.get('min_price'),
            '–†–µ–π—Ç–∏–Ω–≥:': item.get('rating'),
            '–î–∞—Ç—ã –ø–æ–∫–∞–∑–∞:': item.get('dates'),
            '–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞:': item.get('released_year'),
            '–û–ø–∏—Å–∞–Ω–∏–µ:': item.get('description'),
        }

        card = f"{hlink(item['title'], item['link'])}\n\n"

        for arg in arg_dict:
            if arg_dict[arg]:
                if arg == '–¶–µ–Ω–∞:':
                    string = f"{hbold(arg)}  –æ—Ç {arg_dict[arg]} ‚ÇΩ\n"
                elif arg == '–†–µ–π—Ç–∏–Ω–≥:':
                    string = f"{hbold(arg)}  {arg_dict[arg]}‚òÖ\n"
                elif arg == '–û–ø–∏—Å–∞–Ω–∏–µ:':
                    string = f"\n{hbold(arg)}  {arg_dict[arg]}.\n"
                else:
                    string = f"{hbold(arg)}  {arg_dict[arg]}\n"
                card = "".join((card, string))

        if index % 20 == 0:
            await sleep(1)

        await message.answer(card, reply_markup=None)
    await message.answer("–ú–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å –≥–æ—Ä–æ–¥.", reply_markup=get_keyboard())


def validate_message(message: types.Message):
    return message.text.lower().replace(" ", "") in ("–∫–∏–Ω–æ", "—Å–ø–µ–∫—Ç–∞–∫–ª–∏", "–ø–æ–º–µ–Ω—è—Ç—å–≥–æ—Ä–æ–¥")


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == "__main__":
    main()
